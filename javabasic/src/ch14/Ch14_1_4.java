package ch14;

public class Ch14_1_4 {

	public static void main(String[] args) {

		// 람다식(Lambda Expression)
		
		// 함수(메서드)를 간단한 '식(expression)'으로 표현하는 방법
//		int max(int a, int b) {
//			return a > b ? a : b;
//		}
		
//		(a,b) -> a > b ? a : b
		
		// 익명 함수(이름이 없는 함수, anonymous function)
//		int max(int a, int b) {
//			return a > b ? a : b;
//		}
		
//		(int a, int b) -> {
//			return a > b ? a: b
//		}
		
		// 함수와 메서드의 차이?
		//	-> 근본적으로 동일. 함수는 일반적 용어, 메서드는 객체지향개념 용어
		// 	-> 함수는 클래스에 독립적, 메서드는 클래스에 종속적
		
		// 람다식 작성하기
		//	-> 1. 매서드의 이름과 반환타입을 제거하고 '->'를 블록{}앞에 추가한다
		//	-> 2. 반환값이 있는 경우, 식이나 값만 적고 return문 생략 가능(끝에 ';' 안 붙임)
		//	-> 3. 매개변수의 타입이 추론 가능하면 생략가능(대부분의 경우 생략가능)
		
		// 람다식 작성하기 - 주의사항
		//	-> 1. 매개변수가 하나인 경우, 괄호() 생략가능(타입이 없을 때만)
		//	-> 2. 블록 안의 문장이 하나뿐 일 때, 괄호{}생략가능 (끝에 ';'안 붙임)
		//		단, 하나뿐인 문장이 return문이면 괄호{} 생략불가
		
		// 람다식은 익명 함수? 익명 객체!
		//	-> 람다식은 익명 함수가 아니라 익명 객체이다.
		//		-> 메소드 단독으로 존재 불가
		//	-> 람다식(익명 객체)을 다루기 위한 참조변수가 필요. 참조변수의 타입은?
		
		// 람다식. 익명 객체
//		Object obj = (a,b) -> a > b ? a : b
		// 익명클래스, 익명 객체이지만 객체의 선언과 생성을 동시에
//		Object obj = new Object() {
//			int max(int a, int b) {
//				return a > b ? a : b;
//			}
//		};
		// 함수형 인터페이스 필요
		//	-> Object이지만 실제로 선언 메소드를 사용할 수는 없다.
//		int value = obj.max(3,5);	
		
	}

}

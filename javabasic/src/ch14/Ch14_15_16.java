package ch14;

public class Ch14_15_16 {

	public static void main(String[] args) {

		// 스트림
		//	-> 다향한 데이터 소스를 표준화된 방법으로 다루기 위한 것
		//			-> 컬렉션, 배열, ...	
		
		// 1. 스트림 만들기
		// 2. 중간연산(0~n번)
		// 3. 최종연산(1번)
		
		// 스트림이 제공하는 기능 - 중간 연산과 최종 연산
		//	-> 중간 연산 - 연산결과가 스트림인 연산. 반복적으로 적용가능
		//	ex) 중복제거, 자르기, 정렬, ...
		//	-> 최종 연산 - 스트림이 아닌 연산. 단 한번만 적용사능(스트림의 요소를 소모)
		//	ex) 출력, 요소 개수 세기
		
		
		
		
		// 스트림의 특징
		
		//	-> 데이터 소스로부터 데이터를 읽기만할 뿐 변경하지 않는다
		//							read only!
		//	-> Iterator처럼 일회용이다. (필요하면 다시 스트림을 생성해야 함)
		// 	-> 최종 연산 전까지 중간연산이 수행되지 않는다. (지연된 연산)
		//		-> ex) 무한 스트림의 경우
		
		//	-> 스트림은 작업을 내부 반복으로 처리한다
		//		-> 성능은 떨어지나 코드가 간결해짐!
		
		//	-> 스트림의 작업을 병렬로 처리 - 병렬스트림
		//		-> parallel()
		//	-> 기본형 스트림 - IntStream, LongStream, DoubleStream
		//		-> 오토박싱&언박싱의 비효율이 제거됨(Stream<Integer>대신 IntStram사용)
		//		-> 숫자와 관련된 유용한 메서드를 Stream<T>보다 더 많이 제공
		
	}

}

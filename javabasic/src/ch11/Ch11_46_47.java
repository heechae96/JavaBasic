package ch11;

public class Ch11_46_47 {

	public static void main(String[] args) {

		// HashMap
		//	-> 순서x 중복(키x, 값o)
		
		// HashMap과 Hashtable
		//	-> Map인터페이스를 구현. 데이터를 키와 값의 쌍으로 저장
		//	-> Hashtable old	HashMap	new 
		//		-> 동기화 유무 차이
		
		// HashMap
		//	-> Map인터페이스를 구현한 대표적인 컬렉션 클래스
		//	-> 순서를 유지하려면, LinkedHashMap클래스를 사용하면 된다
		// HashMap의 키와 값
		//	-> 해싱(hashing)기법으로 데이터를 저장. 데이터가 많아도 검색이 빠르다
		//	-> Map인터페이스를 구현. 데이터를 키와 값의 쌍으로 저장
		//		키(key) : 중복x
		//		값(value) : 중복o
		
		// 해싱(hashing) 
		//	(1/3) 환자정보관리
		//		-> 함수(해쉬함수)를 이용해서 저장하고 읽어오는것
		//	(2/3)
		//		-> 해시함수(hash function)로 해시테이블에 데이터를 저장, 검색
		//		-> 해시테이블은 배열과 링크드 리스트가 조합된 형태
		//					-> 접근성 장점	-> 변경에 유리
		//	(3/3)
		//		-> 해시테이블에 저장된 데이터를 가져오는 과정
		//			1. 키로 해시함수를 호출해서 해시코드를 얻는다
		//			2. 해시코드(해시함수의 반환값)에 대응하는 링크드리스트를 배열에 찾는다
		//			3. 링크드리스트에서 키와 일치하는 데이터를 찾는다
		//				-> 해시함수는 같은 키에 대해 항상 같은 해시코드를 반환해야 한다
		//					서로 다른 키일지라도 같은 값의 해시코드를 반환할 수도 있다.
		//					ex) 72xxxx(키)환자들은 같은 캐비넷(값)에 들어있을수 있다 
		
		// TreeMap(TreeSet과 유사)
		//	-> 범위검색과 정렬에 유리한 컬렉션 클래스
		//	-> HashMap보다 데이터 추가, 삭제에 시간이 더 걸림
		
		
		
	}

}
